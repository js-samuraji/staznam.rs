{"version":3,"sources":["layout/Header.jsx","components/archive/Archive.jsx","components/forum/Forum.jsx","components/games/xo/Xo.jsx","components/games/Games.jsx","components/lists/Lists.jsx","components/tools/Tools.jsx","layout/Main.jsx","layout/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","autoPlay","muted","loop","Container","Row","Col","xs","md","Image","clasName","roundedCircle","Archive","Forum","Xo","Games","Lists","Tools","Main","ButtonGroup","aria-label","Button","variant","to","path","exact","component","Footer","App","basename","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mQAmCeA,EA7BA,kBACb,gCACE,6BAASC,UAAU,YACjB,yBAAKA,UAAU,mBACb,2BAAOC,IAAI,uCAAuCC,UAAQ,EAACC,OAAK,EAACC,MAAI,EAACJ,UAAU,SAElF,yBAAKA,UAAU,WAEb,kBAACK,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GACd,kBAACC,EAAA,EAAD,CACET,IAAI,gCACJU,SAAS,WACTC,eAAa,KAIjB,kBAACL,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GACd,wBAAIT,UAAU,YAAd,mBAMV,+B,OC7BW,SAASa,IACtB,OACE,6BACE,wCCHN,IAMeC,EAND,kBACZ,6BACE,wCCIWC,EANJ,kBACT,6BACE,oCCMWC,EAPD,kBACZ,6BACE,qCACA,kBAAC,EAAD,QCEWC,EAND,kBACZ,6BACE,uCCIWC,EAND,kBACZ,6BACE,uC,gBCwCWC,EAlCF,kBACX,8BACE,kBAACC,EAAA,EAAD,CAAaC,aAAW,iBACtB,kBAACC,EAAA,EAAD,CAAQC,QAAQ,aACb,IACD,kBAAC,IAAD,CAAMC,GAAG,YAAT,YAEF,kBAACF,EAAA,EAAD,CAAQC,QAAQ,aACd,kBAAC,IAAD,CAAMC,GAAG,UAAT,UAEF,kBAACF,EAAA,EAAD,CAAQC,QAAQ,aACb,IACD,kBAAC,IAAD,CAAMC,GAAG,UAAT,UAEF,kBAACF,EAAA,EAAD,CAAQC,QAAQ,aACd,kBAAC,IAAD,CAAMC,GAAG,UAAT,UAEF,kBAACF,EAAA,EAAD,CAAQC,QAAQ,aACb,IACD,kBAAC,IAAD,CAAMC,GAAG,UAAT,WAKJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,WAAWC,OAAK,EAACC,UAAWd,IACxC,kBAAC,IAAD,CAAOY,KAAK,SAASC,OAAK,EAACC,UAAWb,IACtC,kBAAC,IAAD,CAAOW,KAAK,SAASC,OAAK,EAACC,UAAWX,IACtC,kBAAC,IAAD,CAAOS,KAAK,SAASC,OAAK,EAACC,UAAWV,IACtC,kBAAC,IAAD,CAAOQ,KAAK,SAASC,OAAK,EAACC,UAAWT,OC/B7BU,EANA,kBACb,gCACE,oDCcWC,MAZf,WACE,OACE,yBAAK7B,UAAU,OACb,kBAAC,IAAD,CAAQ8B,SAAS,eACf,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bec04124.chunk.js","sourcesContent":["import React from \"react\";\nimport Image from \"react-bootstrap/Image\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nconst Header = () => (\n  <header>\n    <section className='showcase'>\n      <div className='video-container'>\n        <video src='/staznam.rs/img/background-video.mp4' autoPlay muted loop className='mov' />\n      </div>\n      <div className='content'>\n\n        <Container>\n          <Row>\n            <Col xs={6} md={4}>\n              <Image\n                src=\"/staznam.rs/img/logo/logo.png\"\n                clasName=\"headline\"\n                roundedCircle\n              />\n            </Col>\n\n            <Col xs={6} md={4}>\n              <h1 className=\"headline\">STAZNAM.RS</h1>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    </section>\n    <hr />\n  </header>\n);\n\nexport default Header;","import React from 'react'\n\nexport default function Archive() {\n  return (\n    <div>\n      <h2>Archive</h2>\n    </div>\n  )\n}\n\n","import React from \"react\";\n\nconst Forum = () => (\n  <div>\n    <h1>Forum </h1>\n  </div>\n);\n\nexport default Forum;\n","import React from \"react\";\n\nconst Xo = () => (\n  <div>\n    <h1>XO</h1>\n  </div>\n);\n\nexport default Xo;\n","import React from \"react\";\nimport Xo from \"./xo/Xo\";\n\nconst Games = () => (\n  <div>\n    <h1>Games</h1>\n    <Xo />\n  </div>\n);\n\nexport default Games;\n","import React from \"react\";\n\nconst Lists = () => (\n  <div>\n    <h1>Lists</h1>\n  </div>\n);\n\nexport default Lists;\n","import React from \"react\";\n\nconst Tools = () => (\n  <div>\n    <h1>Tools</h1>\n  </div>\n);\n\nexport default Tools;\n","import React from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport Archive from \"../components/archive/Archive\";\nimport Forum from \"../components/forum/Forum\";\nimport Games from \"../components/games/Games\";\nimport Lists from \"../components/lists/Lists\";\nimport Tools from \"../components/tools/Tools\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Button from \"react-bootstrap/Button\";\n\nconst Main = () => (\n  <main>\n    <ButtonGroup aria-label=\"Basic example\">\n      <Button variant=\"secondary\">\n        {\" \"}\n        <Link to=\"/archive\">Archive</Link>\n      </Button>\n      <Button variant=\"secondary\">\n        <Link to=\"/forum\">Forum</Link>\n      </Button>\n      <Button variant=\"secondary\">\n        {\" \"}\n        <Link to=\"/games\">Games</Link>\n      </Button>\n      <Button variant=\"secondary\">\n        <Link to=\"/lists\">Lists</Link>\n      </Button>\n      <Button variant=\"secondary\">\n        {\" \"}\n        <Link to=\"/tools\">Tools</Link>\n      </Button>\n    </ButtonGroup>\n\n\n    <Switch>\n      <Route path=\"/archive\" exact component={Archive} />\n      <Route path=\"/forum\" exact component={Forum} />\n      <Route path=\"/games\" exact component={Games} />\n      <Route path=\"/lists\" exact component={Lists} />\n      <Route path=\"/tools\" exact component={Tools} />\n    </Switch>\n  </main>\n);\n\nexport default Main;","import React from \"react\";\n\nconst Footer = () => (\n  <footer>\n    <p>&copy; by js-samuraji</p>\n  </footer>\n);\n\nexport default Footer;\n","import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Header from \"./layout/Header\";\nimport Main from \"./layout/Main\";\nimport Footer from \"./layout/Footer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router basename=\"/staznam.rs\">\n        <Header />\n        <Main />\n        <Footer />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}